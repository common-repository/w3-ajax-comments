<?php

//https://rudrastyh.com/wordpress/get-comment-depth.html
function w3ac_get_comment_depth( $comment_id ) {
        $depth_level = 0;
        while( $comment_id > 0  ) {
                $my_comment = get_comment( $comment_id );
                $comment_id = $my_comment->comment_parent;
                $depth_level++;
        }
        return $depth_level;
}


# INSERT COMMENT
//https://rudrastyh.com/wordpress/ajax-comments.html

add_action( 'wp_ajax_ajaxcomments', 'w3ac_submit_ajax_comment' ); // wp_ajax_{action} for registered user
add_action( 'wp_ajax_nopriv_ajaxcomments', 'w3ac_submit_ajax_comment' ); // wp_ajax_nopriv_{action} for not registered users
 
function w3ac_submit_ajax_comment(){
	/*
	 *
	 * @since 4.4.0
	 */
	$comment = wp_handle_comment_submission( wp_unslash( $_POST ) );
	if ( is_wp_error( $comment ) ) {
		$error_data = intval( $comment->get_error_data() );
		if ( ! empty( $error_data ) ) {
			wp_die( '<p>' . $comment->get_error_message() . '</p>', __( 'Comment Submission Failure' ), array( 'response' => $error_data, 'back_link' => true ) );
		} else {
			wp_die( 'Unknown error' );
		}
	}
 
 	$userID = intval($comment->user_id);
 	
 	// if user is logged in
 	if($userID !== 0){
		// get an array of pages that have not been checked for user comments/post credits.
		$userCommentPagesQueue = get_user_meta($userID, "w3px_user_comment_pages_queue", true);
		$userCommentPagesQueue = $userCommentPagesQueue ? $userCommentPagesQueue : array();
		// update array
		
		$count = get_comments(
			array(
				'post_id' => $comment->comment_post_ID,
				'status' => 'approve',			
				'user_id' => $userID,
				'count' => true, // forces result to be comment total					
			)
		);
		
		// if the page isn't already in the queue (and if this is the first comment the user has submitted for this post.
		if(!in_array($comment->comment_post_ID, $userCommentPagesQueue) && (intval($count) == 1)){
			$userCommentPagesQueue[] = $comment->comment_post_ID;
			update_user_meta($comment->user_id, "w3px_user_comment_pages_queue", $userCommentPagesQueue);
		}
		
		$commentID = $comment->comment_ID; // for some reason $comment->comment_ID doesn't persist later on in the function, even though it should.
		
		if(function_exists("w3vx_rankify")){
			// set initial vote
			wp_update_comment(array("comment_ID" => $id, "comment_karma" => 1));
	
			update_comment_meta($comment->comment_ID, 'w3vx_upvotes', 1 );				
			w3vx_rankify($comment->comment_ID, "comment");
		}
	}			
				/*
	 * Set Cookies
	 */
	$user = wp_get_current_user();
	do_action('set_comment_cookies', $comment, $user);
 
	/*
	 * If you do not like this loop, pass the comment depth from JavaScript code
	 */
	$comment_depth = 1;
	$comment_parent = $comment->comment_parent;
	while( $comment_parent ){
		$comment_depth++;
		$parent_comment = get_comment( $comment_parent );
		$comment_parent = $parent_comment->comment_parent;
	}
 
 	/*
 	 * Set the globals, so our comment functions below will work correctly
 	 */
	$GLOBALS['comment'] = $comment;
	$GLOBALS['comment_depth'] = $comment_depth;

	
	/*
	 * Here is the comment template, you can configure it for your website
	 * or you can try to find a ready function in your theme files
	 */
	//Gather comments for a specific page/post 
	$comment = get_comments(array(
		"comment__in" => array($comment->comment_ID),
		)
	);

	ob_start();

	//Display the list of comments
	wp_list_comments(array(
		"walker" => new w3ac_comment_walker(),
	), $comment);

	$html = ob_get_clean();
	
	$result = array();
	$result["id"] = $commentID;
	$result["html"] = $html;
 
 	echo json_encode($result);
	die();
 
}



# GET COMMENT DATA	
 
function w3ac_get_comment_content(){
	$result = array();
	
	$cid = intval($_POST["cid"]);
	$comment = get_comment( $cid, ARRAY_A );
	
	$result["html"] = $comment["comment_content"];
	echo json_encode($result);
	exit();
}

add_action( 'wp_ajax_w3ac_get_comment_content', 'w3ac_get_comment_content' ); // wp_ajax_{action} for registered user

	
# UPDATE COMMENT

function w3ac_update_comment_content(){
	$result = array();
	$comment = array();
	
	$cid = intval($_POST["cid"]);
	// sanitize_textarea_field doesn't work for some reason (even when using most recent install)
	$content = implode( "\n", array_map( 'sanitize_text_field', explode( "\n", $_POST['content'] )) );
	
	$comment['comment_ID'] = $cid;
	$comment['comment_content'] = $content;
	$result["status"] = wp_update_comment($comment);

	$result['content'] = get_comment( $cid, ARRAY_A )["comment_content"]; // We need to get the content generated by WP (at the very least, for automatically added paragraph tags.)
	echo json_encode($result);
	exit();
}

add_action( 'wp_ajax_w3ac_update_comment_content', 'w3ac_update_comment_content' ); // wp_ajax_{action} for registered user



# DISPLAY COMMENTS

function w3ac_display_comments(){
	$pid = intval($_POST["pid"]);
	$page = intval($_POST["page"]);
	$commentsPerPage = (isset($_POST["commentsPerPage"])) ? intval($_POST["commentsPerPage"]) : 10;
	
	if($page == 0) $page = 1;

	if($pid == 0) return;
	

	//Gather comments for a specific page/post 
	$comments = get_comments(array(
		'post_id' => $pid,
		'status' => 'approve' //Change this to the type of comments to be displayed
	));

	$numberOfComments = 0;
	
	// we're only interested in the number of top-level comments, so let's count them
	foreach($comments as $c){
		if($c->comment_parent == 0){
			$numberOfComments++;
		}
	}

	$numberOfPages = intval(ceil($numberOfComments / $commentsPerPage)); // find the number of pages, round up the number. The result is a float that's then re-cast as an integer value. 


	// Pagination links should move the screen to the top of the comments, not the top of the page. However, it's possible that there may be several comments wrappers on the same page for some reason. So let's create a unique ID for each instance of this function/divider.
	
	$id = "w3ac-comments-".$pid;
	

	echo "<h3 id='".$id."' class='w3ac-comments-list-heading'>".count($comments)." Comments</h3>";

	
	
	echo '<ol class="commentlist">';
	//Display the list of comments
	wp_list_comments(array(
		"walker" => new w3ac_comment_walker(),
		"page" => $page,
		'per_page' => $commentsPerPage, //Allow comment pagination
		'reverse_top_level' => false //Show the oldest comments at the top of the list
	), $comments);
	echo "</ol>";
	
	echo w3ac_pagination($page, 10, $numberOfPages, $id);
	exit();
}

add_action( 'wp_ajax_w3ac_display_comments', 'w3ac_display_comments' );
add_action( 'wp_ajax_nopriv_w3ac_display_comments', 'w3ac_display_comments' );





function w3ac_pagination($currentPageNumber = 1, $numberOfPageLinks = 10, $numberOfPages, $id){
	if($numberOfPageLinks > $numberOfPages) { // if the results return less than the maxiumum number of page links ($numberOfPageLinks), use the $numberOfPages as the $numberOfPageLinks value
		$numberOfPageLinks = $numberOfPages;
	}
	
	// Pagination links should move the screen to the top of the comments, not the top of the page. However, it's possible that there may be several comments wrappers on the same page for some reason. So let's create a unique ID for each instance of this function/divider.
	

	$html = "<div class='w3ac-pagination'>";
	
	$html .= "<a href='#".$id."' class='page-nav' data-id='1'><<</a>";

	if($currentPageNumber <= ceil($numberOfPageLinks / 2) ){
		$start = 1;
		$end = $numberOfPageLinks;
	} else if( ($currentPageNumber <= $numberOfPages) && ($currentPageNumber >= ($numberOfPages - ceil($numberOfPageLinks / 2))) ){
			$start = $numberOfPages - ($numberOfPageLinks - 1);
			$end = $numberOfPages;
	} else {
		$numberOfPageLinks = $numberOfPageLinks - 1;
	
		if ( $numberOfPageLinks & 1 ) { // if odd -- https://stackoverflow.com/questions/7959247/php-test-if-number-is-odd-or-even
			$buffer = ceil($numberOfPageLinks / 2);
		
			$start = $currentPageNumber - $buffer;
			$end = $currentPageNumber + ($buffer - 1);
		} else {
			$buffer = floor($numberOfPageLinks / 2);
		
			$start = $currentPageNumber - $buffer;
			$end = $currentPageNumber + $buffer;
		}
	}
	
	for($c = $start; $c <= $end; $c++){
		if($c == $start && (count($numberOfPages) > 1)){
			$html .= "<a href='#".$id."' class='page-nav' data-id='".($currentPageNumber -1)."'>prev</a>";
		}
		
		$active = ($currentPageNumber == $c) ? "active" : null;
		$html .= "<a href='#".$id."' class='page-number ".$active."' data-id='".$c."'>".$c."</a>";

		if( ($c == $end) && ($currentPageNumber !== $numberOfPages) ){
			$html .= "<a href='#".$id."' class='page-nav' data-id='".($currentPageNumber + 1)."'>next</a>";
		}
	}

	$html .= "<a href='#".$id."' class='page-nav' data-id='".$numberOfPages."'>>></a>";
	
	$html .= "</div>";
	
	return $html;
}

?>